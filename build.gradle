/*
  File    : build.gradle
  Purpose : Build file for the JasperReportsIntegration project on 

  Date        Author    Comment
  --------------------------------------------------
  08.09.2020  D. Aust   initial creation
  14.09.2020  D. Aust   fixed script to be able to run on Windows as well, added some debug output.
  15.09.2020  D. Aust   - changed war file name from JasperReportsInegration.war to jri.war
                        - excluded the servlet-api*.jar files from the downloaded jasper libraries
  18.09.2020  D. Aust   added missing jasperreports.properties file to WEB-INF/classes
  03.10.2020  D. Aust   fixed bug in generating eclipse project file, 
                        now it is back to using "bin/default" as the default output dir, should be "build"
  07.10.2020  D. Aust   #52 - Uptake JasperReports Library 6.15.0
  07.10.2020  D. Aust   #55 - Barcodes produce classnotfound error
 */

plugins {
  id "war"
  id "eclipse"
  id "distribution"
}
apply from: 'https://raw.github.com/gretty-gradle-plugin/gretty/master/pluginScripts/gretty.plugin'
//for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.internal.os.OperatingSystem

// import groovy helper functions
//  println "$project.projectDir/src/groovy/tools.groovy"
//  evaluate(new File("$project.projectDir/src/groovy/tools.groovy"))

//-----------------------------------------------------------------------------
//-- Configuration: typically the JRI version and version of jasperreports 
//-- are changed
//-----------------------------------------------------------------------------

  project.description       = "JasperReportsIntegration - more details here: https://github.com/daust/JasperReportsIntegration"
  project.version           = '2.6.2'
  
  sourceCompatibility       = 1.8
  targetCompatibility       = 1.8

  archivesBaseName          = "jri"

  // version of jasperreports to be used
  def jasperreportsVersion  ='6.15.0'  

//-----------------------------------------------------------------------------
//-- Groovy helper functions
//-----------------------------------------------------------------------------

/* define repositories to look for maven modules */
repositories {
    maven {url "https://plugins.gradle.org/m2/"}
    maven {url "https://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts"}
    mavenCentral()
    flatDir {dirs "lib/jasper-reports/$jasperreportsVersion"}
}

/* define specific maven dependencies */
dependencies {
    // *** Only for compilation, NOT distributed
    //compileOnly 'javax.servlet:javax.servlet-api:3.1.0'

    // https://mvnrepository.com/artifact/log4j/log4j
    implementation group: 'log4j', name: 'log4j', version: '1.2.16'

    // https://mvnrepository.com/artifact/commons-configuration/commons-configuration
    implementation group: 'commons-configuration', name: 'commons-configuration', version: '1.8'

    // https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8
    implementation group: 'com.oracle.database.jdbc', name: 'ojdbc8', version: '19.+'
    // https://mvnrepository.com/artifact/com.oracle.database.jdbc/ucp
    implementation group: 'com.oracle.database.jdbc', name: 'ucp', version: '19.+'

    // https://mvnrepository.com/artifact/xalan/serializer
    // see bug: #55 - Barcodes produce classnotfounderror
    compile group: 'xalan', name: 'serializer', version: '2.7.1'
    // https://mvnrepository.com/artifact/org.apache.xmlgraphics/xmlgraphics-commons
    // see bug: #55 - Barcodes produce classnotfounderror
    compile group: 'org.apache.xmlgraphics', name: 'xmlgraphics-commons', version: '2.+'

    // *** Only for TESTING
    testCompileOnly 'junit:junit:4.12'

    // joda time because auf 
    // https://mvnrepository.com/artifact/joda-time/joda-time
    compile group: 'joda-time', name: 'joda-time', version: '2.4'

    // dependencies from jasperreports.proj
    compile fileTree(dir: "lib/jasper-reports/$jasperreportsVersion", include: ['*.jar'])
}

gretty {
  //servletContainer = 'tomcat9' // can be changed to Tomcat, by default jetty9 is used
  httpPort      = 8099
  //initParameter 'oc.jasper.config.home', "/tmp/jri"
  contextPath   = "/jri"
  jvmArgs = [
            '-Xms2048m', //Xms4096m
            '-Xmx2048m', //Xmx4096m
            '-XX:+UseConcMarkSweepGC',
            '-server',
            '-Djava.awt.headless=true'
    ]
} 

//-----------------------------------------------------------------------------
//-- Groovy helper functions
//-----------------------------------------------------------------------------

/* download the required libraries for jasperreports from the official repositories and 
   store them locally (also following redirect instructions) */
def downloadRedirect( String url, String filename ) {
  while( url ) {
    new URL( url ).openConnection().with { conn ->
      conn.instanceFollowRedirects = false
      url = conn.getHeaderField( "Location" )      
      if( !url ) {
        new File( filename ).withOutputStream { out ->
          conn.inputStream.with { inp ->
            out << inp
            inp.close()
          }
        }
      }
    }
  }
}

/* download files without redirection */
def download(String remoteUrl, String localUrl) {
  new File("$localUrl").withOutputStream { out ->
      new URL(remoteUrl).withInputStream { from ->  out << from; }
  }
}

// a wrapper closure around executing a string                                  
// can take either a string or a list of strings (for arguments with spaces)    
// prints all output, complains and halts on error                              
def runCommand = { strList ->

  def proc = strList.execute()
  proc.in.eachLine { line -> println line }
  proc.out.close()
  proc.waitFor()

  print "[INFO] ( "
  if(strList instanceof List) {
    strList.each { print "${it} " }
  } else {
    print strList
  }
  println " )"

  if (proc.exitValue()) {
    println "gave the following error: "
    println "[ERROR] ${proc.getErrorStream()}"
  }
  assert !proc.exitValue()
}

// run os command dependent on OS
private static Iterable<String> osAdaptiveCommand(String... commands) {
	def newCommands = []
	if (OperatingSystem.current().isWindows()) {
		newCommands = ['cmd', '/c']
	}

	newCommands.addAll(commands)
	return newCommands
}


/* Eclipse configurations 
   see: https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseClasspath.html */
eclipse {
  classpath {
    // remove duplicate libraries from the build path. There is a conflict in Eclipse when duplicate libraries are on the build path
    // one in the jasper build lib directory (lib/jasper-reports/$jasperreportsVersion) and the local gradle cache: 
    // 
    file {
            whenMerged { classpath ->
                    java.util.List wanted = new java.util.ArrayList()
                    def entries = classpath.getEntries()
                    entries.each {
                        if (   (it.path.contains('commons-lang-2.6.jar') && it.path.contains('.gradle/caches'))
                            ||
                               (it.path.contains('commons-logging-1.1.1.jar') && it.path.contains('.gradle/caches'))
                        ) {
                            println('Removing library: ' + it.path + ' from eclipse classpath (duplicate)')
                        } else {
                            wanted.add(it)
                        }
                    }
                    classpath.setEntries(wanted)
                }
     }
    //customizing the classes output directory => use /build instead of /bin
    /*defaultOutputDir = file('build')
    file.whenMerged {
            entries.each { entry ->
                if (entry.kind == 'src' && entry.hasProperty('output')) {
                    entry.output = entry.output.replace('bin/', "build/")
                }
            }
        }
    */
    //default settings for downloading sources and Javadoc:
    downloadSources = true
    downloadJavadoc = false
  }

  project {
     resourceFilter {
       appliesTo = 'FOLDERS'
       type = 'EXCLUDE_ALL'
       matcher {
         id = 'org.eclipse.ui.ide.multiFilter'
         // to find out which arguments to use, configure the desired
         // filter with Eclipse's UI and copy the arguments string over
         arguments = '1.0-projectRelativePath-matches-false-false-src/main/dist'
       }
     }
     resourceFilter {
       appliesTo = 'FOLDERS'
       type = 'EXCLUDE_ALL'
       matcher {
         id = 'org.eclipse.ui.ide.multiFilter'
         // to find out which arguments to use, configure the desired
         // filter with Eclipse's UI and copy the arguments string over
         arguments = '1.0-projectRelativePath-matches-false-false-src/doc'
       }
     }
   }

}

//-----------------------------------------------------------------------------
//-- task definitions for JasperReportsIntegration
//-----------------------------------------------------------------------------

war {
    dependsOn configurations.compile
    archiveName = "${archivesBaseName}-${project.version}-${jasperreportsVersion}.war"

    // replaces tokens in the respective files only for the assembly of the .war file:
    // @project.version@ => 
    // @jasperreports.version@ => 
    filesMatching(["*.html", "*.jsp"]) {
      filter(ReplaceTokens, tokens: ['project.version': project.version, 'jasperreports.version': jasperreportsVersion])
    }
    
    //from 'src/rootContent' // adds a file-set to the root of the archive
    // all occurences of @project.version@ will be replaced with the current project version
    //from('src/doc/User-Documentation'){
    //  into 'doc' 
      //filter(ReplaceTokens, tokens: ['project.version': project.version, 'jasperreports.version': jasperreportsVersion])
    //} 
    from('src/conf'){
      include 'jasperreports.properties' into 'WEB-INF/classes'
    }

    doFirst{
      manifest {
          attributes( "Implementation-Title": project.name,
                      "Implementation-Version": project.version,
                      "Main-Class": "main.CommandLine",
                      //"Class-Path": "*.jar"
                      //"Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' ') + " " + jar.outputs.files.collect { it.getName() }.join(' ')
                      "Class-Path": war.classpath.collect { it.getName() }.join(' ') + " " + jar.outputs.files.collect { it.getName() }.join(' ')
                    )
      }
    }

    //webInf { from 'src/additionalWebInf' }  // adds a file-set to the WEB-INF dir.
    //classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
    //classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    //classpath = ['src/...',]
    //classpath = war.classpath.plus('src/conf/jasperreports.properties')
    //webXml = file('src/conf/web.xml') // copies a file to WEB-INF/web.xml
    //webInf { from 'src/conf/weblogic.xml' }  // adds a file-set to the WEB-INF dir.  
}

distZip.setArchiveName("${archivesBaseName}-${project.version}-${jasperreportsVersion}.zip")
distTar.setArchiveName("${archivesBaseName}-${project.version}-${jasperreportsVersion}.tar")

distributions {
    main {
        distributionBaseName = 'JasperReportsIntegration'
        println 'getName:' + Distribution.getName()
        contents {
            from('src/apex'){into 'apex'}
            from('src/sql'){into 'sql'}
            from('src/shell-scripts'){//exclude '*ConfigDir.*'
                                      //exclude 'deploy*'  
                                      into 'bin'}
            from('src/conf/application.properties'){into 'conf'}
            from('src/conf/log4j.properties'){into 'conf'}
            //from('src/doc/User-Documentation'){into 'doc' filter(ReplaceTokens, tokens: ['project.version': project.version, 'jasperreports.version': jasperreportsVersion])}
            from('src/doc/Documentation.html'){ filter(ReplaceTokens, tokens: ['project.version': project.version, 'jasperreports.version': jasperreportsVersion])}
            from('src/reports'){into 'reports'}
            from (war.outputs){into 'webapp' rename(war.archiveName , "jri.war")}

            /*from (configurations.compile){
              include(["commons-configuration-*.jar"
                          , "commons-lang-*.jar" 
                          , "commons-logging-*.jar"
                          , "jasperreports-*.jar"])
              into 'lib'
            }*/

            from ("lib/jasper-reports/$jasperreportsVersion"){include 'jasperreports*.jar' into 'lib'}
            from (jar.outputs){into 'lib'}
            from ('lib/additional'){into 'lib'}

            // copy war file directly into jetty/webapps
            // rather not, make zip distribution too large
            //from (war.outputs){into 'jetty/webapps' rename(war.archiveName , "jri.war")}
        }
    }
}
println "\n***********************************************"
println "Version: " + project.version
println "Source-Compatibility: " + project.sourceCompatibility
println "Project description: " + project.property("description")
println "jasperreports version: " + jasperreportsVersion
println "War file name: " + war.archiveName // this will pick up the modified name defined in war{}
println "local environment OC_JASPER_CONFIG_HOME=" + System.getenv( "OC_JASPER_CONFIG_HOME")
println "***********************************************\n\n"

//-----------------------------------------------------------------------------
//-- task definitions for developers
//-- setting up the developer environment and downloading new JRI libraries 
//-- for a new JasperReports release
//-----------------------------------------------------------------------------

/* create a local environment with configuration files and reports and logs for developers
   Please register path in gradle.properties file */
task jriCreateLocalEnvironment{
  description = "create a local environment with configuration files and reports and logs. Please register path in gradle.properties file"

  doLast{
    println "Create local developer environment at jriLocalPath=" + jriLocalPath
    file(jriLocalPath).mkdirs()

    copy{from ('src/reports') into "$jriLocalPath/reports"}
    copy{from ('src/main/dist/logs') into "$jriLocalPath/logs"}
    copy{from ('src/conf/application.properties') into "$jriLocalPath/conf"}
    copy{from ('src/conf/log4j.properties') into "$jriLocalPath/conf"}
  }
}

task jriDownloadJasperLibraries{
  description = "This will download the libraries for version $jasperreportsVersion to a local directory. Needs to be done only once when you upgrade to a new jasperreports version."

  // ${File.separator}
  doLast{
    def tempLocation    ="$project.projectDir/build/download/$jasperreportsVersion"
    def tempLocation2   ="$tempLocation/jasperreports-$jasperreportsVersion"
    def targetLocation  ="$project.projectDir/lib/jasper-reports/$jasperreportsVersion"
    def baseURLJasper   ="https://sourceforge.net/projects/jasperreports/files/jasperreports/JasperReports%20${jasperreportsVersion}"

    println " download files and install in target location: " + targetLocation
    println " first download project files into temporary directory: " + tempLocation2

    file(targetLocation).mkdirs()
    file(tempLocation).mkdirs()

    downloadRedirect( "$baseURLJasper/jasperreports-${jasperreportsVersion}-project.tar.gz", "$tempLocation/jasperreports.tar.gz")
    downloadRedirect( "$baseURLJasper/jasperreports-chart-themes-${jasperreportsVersion}.jar", "$tempLocation/jasperreports-chart-themes-${jasperreportsVersion}.jar")
    downloadRedirect( "$baseURLJasper/jasperreports-chart-customizers-${jasperreportsVersion}.jar", "$tempLocation/jasperreports-chart-customizers-${jasperreportsVersion}.jar")
    downloadRedirect( "$baseURLJasper/jasperreports-functions-${jasperreportsVersion}.jar", "$tempLocation/jasperreports-functions-${jasperreportsVersion}.jar")
    downloadRedirect( "$baseURLJasper/jasperreports-fonts-${jasperreportsVersion}.jar", "$tempLocation/jasperreports-fonts-${jasperreportsVersion}.jar")

    // ungzip / untar files
    copy {
            from tarTree(resources.gzip("$tempLocation/jasperreports.tar.gz"))
            into "$tempLocation"
        }
    // run build.xml file to download all libraries and build the jasperreport libraries
	println "running ant task: " + osAdaptiveCommand("ant", "-f", "$tempLocation2/build.xml", "retrievelibs")
    runCommand.call( osAdaptiveCommand("ant", "-f", "$tempLocation2/build.xml", "retrievelibs") )
	
	println "running ant task: " + osAdaptiveCommand("ant", "-f", "$tempLocation2/build.xml", "jar")
    runCommand.call( osAdaptiveCommand("ant", "-f", "$tempLocation2/build.xml", "jar") )

    // copy all libraries to target location to: lib/jasper-reports/<version>
    copy {
            from "$tempLocation2"
            from "$tempLocation2/dist"
            from "$tempLocation2/dist/lib"
            from "$tempLocation"    // chart-customizers, chart-themes, jasperreports-functions, jasperreports-fonts
            into "$targetLocation"
            include "*.jar"
            // exclude all that are used for compilation and test only
            // but not required at runtime
            exclude "net.tascalate.asmx*jar"
            exclude "net.tascalate.javaflow*jar"
            exclude "testng*jar"
            exclude "servlet-api*"
    }
  }
}   
